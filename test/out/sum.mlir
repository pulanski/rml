// MLIR module generated by Toy compiler
module {
  toy.func @multiply_transpose(a, b) {
    return arith.mulf transpose(a), transpose(b) : f64
  }

  toy.func @main() {
    %0 = tensor_literal(tensor_literal(arith.constant 1.000000 : f64, arith.constant 2.000000 : f64, arith.constant 3.000000 : f64), tensor_literal(arith.constant 4.000000 : f64, arith.constant 5.000000 : f64, arith.constant 6.000000 : f64))
    %1 = tensor_literal(arith.constant 1.000000 : f64, arith.constant 2.000000 : f64, arith.constant 3.000000 : f64, arith.constant 4.000000 : f64, arith.constant 5.000000 : f64, arith.constant 6.000000 : f64)
    %2 = multiply_transpose(a, b)
    %3 = multiply_transpose(b, a)
    print(d)
  }
}
