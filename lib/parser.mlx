// %{
//   open Ast
// %}

// %token <int> INT
// %token PLUS MINUS MULT DIV
// %token LPAREN RPAREN
// %token <string> IDENT
// %token FN
// %token EOF

// %start <Ast.program> program
// %type <Ast.expr> expr

// %left PLUS MINUS
// %left MULT DIV
// %%

// program:
// | expr EOF { [$1] }

// expr:
// | INT                    { Int $1 }
// | IDENT                  { Var $1 }
// | expr PLUS expr         { BinOp (Add, $1, $3) }
// | expr MINUS expr        { BinOp (Sub, $1, $3) }
// | expr MULT expr         { BinOp (Mul, $1, $3) }
// | expr DIV expr          { BinOp (Div, $1, $3) }
// | LPAREN expr RPAREN     { $2 }
