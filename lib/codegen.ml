open Ir

let counter = ref 0
let var_map = Hashtbl.create 10

let fresh_var () =
  let var = Printf.sprintf "%%%d" !counter in
  incr counter;
  var

let reset_counter () =
  counter := 0;
  Hashtbl.clear var_map

let get_ssa_var name =
  try Hashtbl.find var_map name
  with Not_found -> name (* or handle error *)

let rec emit_mlir_expr = function
  | IRVariable x -> get_ssa_var x
  | IRBinOp (op, lhs, rhs) ->
      let lhs_ssa = emit_mlir_expr lhs in
      let rhs_ssa = emit_mlir_expr rhs in
      let result_var = fresh_var () in
      Printf.sprintf "%s = %s %s, %s : f64" result_var (emit_op op) lhs_ssa rhs_ssa
  | IRU8 x -> Printf.sprintf "arith.constant %d : i8" x
  | IRU16 x -> Printf.sprintf "arith.constant %d : i16" x
  | IRU32 x -> Printf.sprintf "arith.constant %d : i32" x
  | IRU64 x -> Printf.sprintf "arith.constant %d : i64" x
  | IRI8 x -> Printf.sprintf "arith.constant %d : i8" x
  | IRI16 x -> Printf.sprintf "arith.constant %d : i16" x
  | IRI32 x -> Printf.sprintf "arith.constant %d : i32" x
  | IRI64 x -> Printf.sprintf "arith.constant %d : i64" x
  | IRF32 x -> Printf.sprintf "arith.constant %f : f32" x
  | IRF64 x -> Printf.sprintf "arith.constant %f : f64" x
  | IRCall (func_name, args) ->
      let args_str = String.concat ", " (List.map emit_mlir_expr args) in
      Printf.sprintf "%s(%s)" func_name args_str
  | IRTensor (shape, elements) ->
    let shape_str = String.concat "x" (List.map string_of_int shape) in
    let elements_str = String.concat ", " (List.map emit_mlir_expr elements) in
    Printf.sprintf "rml.constant dense<[%s]> : tensor<%sxf64>" elements_str shape_str
  | _ -> failwith "not implemented"

and emit_op = function
  | IRAdd -> "rml.add"
  | IRSub -> "rml.sub"
  | IRMul -> "rml.mul"
  | IRDiv -> "rml.div"

let emit_mlir_stmt = function
  | IRExpr expr -> emit_mlir_expr expr
  | IRReturn expr -> "return " ^ emit_mlir_expr expr
  | IRVarDecl (_name, expr) ->
      let var_name = fresh_var () in
      Printf.sprintf "%s = %s" var_name (emit_mlir_expr expr)

let emit_mlir_function func =
  reset_counter ();
  let stmts_str = String.concat "\n  " (List.map emit_mlir_stmt func.body) in
  (* Extract names from function parameters *)
  let param_names = List.map (fun p -> Printf.sprintf "%s: %s" p.name p.param_type) func.params in
  let params_str = String.concat ", " param_names in
  Printf.sprintf "func.func @%s(%s) {\n  %s\n}\n" func.func_name params_str stmts_str

let emit_mlir ir_program =
  let header = "// MLIR module generated by rml compiler\n" in
  let functions_str = String.concat "\n" (List.map emit_mlir_function ir_program) in
  header ^ "module {\n" ^ functions_str ^ "}\n"
